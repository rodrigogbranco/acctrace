/**
 *
 * $Id$
 */
package br.ufms.facom.acctrace.model.validation;

import org.eclipse.emf.common.util.EList;

import br.ufms.facom.acctrace.model.OWLOntology;
import br.ufms.facom.acctrace.model.RequirementContainer;
import br.ufms.facom.acctrace.model.UMLModel;

// TODO: Auto-generated Javadoc
/**
 * A sample validator interface for
 * {@link br.ufms.facom.acctrace.model.Reference}. This doesn't really do
 * anything, and it's not a real EMF artifact. It was generated by the
 * org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's
 * code generator can be extended. This can be disabled with -vmargs
 * -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface ReferenceValidator {

	/**
	 * Validate.
	 * 
	 * @return true, if successful
	 */
	boolean validate();

	/**
	 * Validate uml models.
	 * 
	 * @param value
	 *            the value
	 * @return true, if successful
	 */
	boolean validateUmlModels(EList<UMLModel> value);

	/**
	 * Validate requirement container.
	 * 
	 * @param value
	 *            the value
	 * @return true, if successful
	 */
	boolean validateRequirementContainer(RequirementContainer value);

	/**
	 * Validate ontologies.
	 * 
	 * @param value
	 *            the value
	 * @return true, if successful
	 */
	boolean validateOntologies(OWLOntology value);

	/**
	 * Validate id.
	 * 
	 * @param value
	 *            the value
	 * @return true, if successful
	 */
	boolean validateId(String value);
}
